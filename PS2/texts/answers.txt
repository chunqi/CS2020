1.b MyFastList algorithm
Sort the array (after each add or use a better insertion algorithm)
Do binary search on the array (should be beast case w/o for random access)

1.c Sumulation results on 15" Macbook Pro w/ Retina 2014

=FixedLengthList=
Total cost random: 		0.16317299
Total cost increasing: 	0.264102
Total cost decreasing: 	0.046618

=MoveToFrontList= *using arraycopy
Total cost random: 		0.064741
Total cost increasing: 	0.061937
Total cost decreasing: 	0.064234

=MoveToFrontList= *with negation signals
Total cost random: 		0.079319
Total cost increasing: 	0.069114
Total cost decreasing: 	0.076215

=MyFastList= *using binary search on sorted array
Total cost random: 		0.059765
Total cost increasing: 	0.05789
Total cost decreasing: 	0.062768

1.d
Firstly it prevents storing of negative numbers in the list.
Secondly the negations also take up extra space
The negated numbers also do not represent actual elements, rather lack thereof

2.a
I decided to use a sort of binary search method to skip forward the records
If the skipped to record is still the same person then I would skip even more
If the person changed then I would reduce the amount skipped and retry
The smallest skip amount is 0 so if skip is 0 and the next person is different,
then I have found the last entry for the current guy.
Each get is cached.

=Number of gets=
manyNames: 4838 for 8802
shortNames: 57 for 62
veryShortNames: 7 for 7
longNames: 621 for 559528