*Properties of each algorithm with reference to Wikipedia
SorterA:	Mr. InsertionSort - Worst case performance on reverse sorted test case; Known stable
SorterB:	Ms. SelectionSort - Consistent time performance on all test cases of similar sizes; Known
			not stable
SorterC:	Ms. MergeSort - By elimination, and also because statistically merge sort should perform
			better than quick sort on random test case; Most implementations stable
SorterD:	Dr. Evil - Failed to sort a test case
SorterE:	Mr. Quicksort - Optimal performance on random test case and terrible on nearly sorted arrays,
			implying a sub-optimal pivot chosen; Known not stable
SorterF:	Mr. BubbleSort - Very fast in off by one (front) but extremely slow in off by one (back) as
			well as reverse sorted test case; Known stable
Sample Run:
SorterA is YStable
SorterB is NStable
SorterC is YStable
SorterD is NStable
SorterE is NStable
SorterF is YStable
=ArrayOneOff(f)=
SorterA PASS: 0.00687832
SorterB PASS: 0.74989927
SorterC PASS: 0.26515704
SorterD PASS: 0.15564513
SorterE PASS: 8.743489
SorterF PASS: 0.011392153
=ArrayOneOff(b)=
SorterA PASS: 9.80405E-4
SorterB PASS: 0.7583863
SorterC PASS: 0.25363484
SorterD PASS: 0.022983477
SorterE PASS: 8.846578
SorterF PASS: 26.847696
=ArrayRandom=
SorterA PASS: 0.14325616
SorterB PASS: 0.052543815
SorterC PASS: 0.029121675
SorterD PASS: 0.002254471
SorterE PASS: 0.09354405
SorterF PASS: 0.89285374
=ArrayRandom=
SorterA PASS: 0.15990217
SorterB PASS: 0.051346473
SorterC PASS: 0.03738884
SorterD PASS: 0.003235794
SorterE PASS: 0.08991721
SorterF PASS: 0.8897784
=ArraySorted=
SorterA PASS: 5.024E-4
SorterB PASS: 0.7483665
SorterC PASS: 0.25481838
SorterD PASS: 0.020259636
SorterE PASS: 8.374269
SorterF PASS: 2.85732E-4
=ArrayReverse=
SorterA PASS: 29.796022
SorterB PASS: 0.7955722
SorterC PASS: 0.26457146
SorterD FAIL: 0.020485152
SorterE PASS: 9.743395
SorterF PASS: 37.250866